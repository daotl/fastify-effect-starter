// GENERATED by @edgedb/generate v0.3.1
// Run 'npx @edgedb/generate edgeql-js' to re-generate

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export declare type $Role = {
  "user": $.$expr_Literal<$Role>;
  "admin": $.$expr_Literal<$Role>;
} & $.EnumType<"default::Role", ["user", "admin"]>;
declare const Role: $Role

export declare type $BaseλShape = $.typeutil.flatten<_std.$Object_b4984deceb7c11ed94484765662a055bλShape & {
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
}>;
declare type $Base = $.ObjectType<"default::Base", $BaseλShape, null, [
  ..._std.$Object_b4984deceb7c11ed94484765662a055b['__exclusives__'],
]>;
declare const $Base: $Base

declare const Base: $.$expr_PathNode<$.TypeSet<$Base, $.Cardinality.Many>, null> 

export declare type $CategoryλShape = $.typeutil.flatten<$BaseλShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "posts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "<categories[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<categories": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Category = $.ObjectType<"default::Category", $CategoryλShape, null, [
  ...$Base['__exclusives__'],
]>;
declare const $Category: $Category

declare const Category: $.$expr_PathNode<$.TypeSet<$Category, $.Cardinality.Many>, null> 

export declare type $GroupλShape = $.typeutil.flatten<$BaseλShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "editablePosts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "groupRoles": $.LinkDesc<$GroupRole, $.Cardinality.Many, {}, false, true,  false, false>;
  "members": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "owner": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "viewablePosts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "<group[is GroupRole]": $.LinkDesc<$GroupRole, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editorGroups[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewerGroups[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<groups[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editorGroups": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<group": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<groups": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewerGroups": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Group = $.ObjectType<"default::Group", $GroupλShape, null, [
  ...$Base['__exclusives__'],
]>;
declare const $Group: $Group

declare const Group: $.$expr_PathNode<$.TypeSet<$Group, $.Cardinality.Many>, null> 

export declare type $GroupRoleλShape = $.typeutil.flatten<$BaseλShape & {
  "group": $.LinkDesc<$Group, $.Cardinality.One, {}, false, false,  false, false>;
  "code": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "users": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<groupRoles[is Group]": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "<groupRoles[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<groupRoles": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $GroupRole = $.ObjectType<"default::GroupRole", $GroupRoleλShape, null, [
  ...$Base['__exclusives__'],
]>;
declare const $GroupRole: $GroupRole

declare const GroupRole: $.$expr_PathNode<$.TypeSet<$GroupRole, $.Cardinality.Many>, null> 

export declare type $PostλShape = $.typeutil.flatten<$BaseλShape & {
  "categories": $.LinkDesc<$Category, $.Cardinality.Many, {}, false, false,  false, false>;
  "editorGroups": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "viewerGroups": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "content": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "published": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "author": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "editors": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "viewers": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is Category]": $.LinkDesc<$Category, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editablePosts[is Group]": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewablePosts[is Group]": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authoredPosts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editablePosts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewablePosts[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authoredPosts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editablePosts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewablePosts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Post = $.ObjectType<"default::Post", $PostλShape, null, [
  ...$Base['__exclusives__'],
  {title: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
declare const $Post: $Post

declare const Post: $.$expr_PathNode<$.TypeSet<$Post, $.Cardinality.Many>, null> 

export declare type $ProfileλShape = $.typeutil.flatten<$BaseλShape & {
  "bio": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.Many, {}, false, true,  false, false>;
  "<profile[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<profile": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Profile = $.ObjectType<"default::Profile", $ProfileλShape, null, [
  ...$Base['__exclusives__'],
]>;
declare const $Profile: $Profile

declare const Profile: $.$expr_PathNode<$.TypeSet<$Profile, $.Cardinality.Many>, null> 

export declare type $UserλShape = $.typeutil.flatten<$BaseλShape & {
  "profile": $.LinkDesc<$Profile, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "role": $.PropertyDesc<$Role, $.Cardinality.One, false, false, false, true>;
  "groups": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, true,  false, false>;
  "groupRoles": $.LinkDesc<$GroupRole, $.Cardinality.Many, {}, false, true,  false, false>;
  "authoredPosts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "editablePosts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "viewablePosts": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, true,  false, false>;
  "<members[is Group]": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner[is Group]": $.LinkDesc<$Group, $.Cardinality.Many, {}, false, false,  false, false>;
  "<users[is GroupRole]": $.LinkDesc<$GroupRole, $.Cardinality.Many, {}, false, false,  false, false>;
  "<author[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editors[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewers[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Profile]": $.LinkDesc<$Profile, $.Cardinality.Many, {}, false, false,  false, false>;
  "<author": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<editors": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<members": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<users": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<viewers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$Base['__exclusives__'],
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
declare const $User: $User

declare const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> 



export { Role, $Base, Base, $Category, Category, $Group, Group, $GroupRole, GroupRole, $Post, Post, $Profile, Profile, $User, User };

declare type __defaultExports = {
  "Role": typeof Role;
  "Base": typeof Base;
  "Category": typeof Category;
  "Group": typeof Group;
  "GroupRole": typeof GroupRole;
  "Post": typeof Post;
  "Profile": typeof Profile;
  "User": typeof User
};
declare const __defaultExports: __defaultExports;
export default __defaultExports;
