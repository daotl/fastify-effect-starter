// Generated by ts-to-effect-schema
import * as S from "@effect/schema/Schema";
import type { ReadonlyDeep } from "type-fest";
import { pipe } from "@effect/data/Function";
import type { Category, Post, User, Profile } from "./interfaces.js";

type BuiltIns =
  | null
  | undefined
  | string
  | number
  | boolean
  | symbol
  | bigint
  | Date
  | RegExp;

type ReplaceType<ValueType, FromType, ToType> = ValueType extends FromType
  ? ToType
  : ValueType;

type ReplaceTypeDeep<ValueType, FromType, ToType> = ValueType extends BuiltIns
  ? ReplaceType<ValueType, FromType, ToType>
  : {
      [KeyType in keyof ValueType]: ReplaceTypeDeep<
        ValueType[KeyType],
        FromType,
        ToType
      >;
    };

export const stdBaseObjectSchema = S.struct({
  id: S.string,
});

export const stdObjectSchema = stdBaseObjectSchema;

export const baseSchema = pipe(
  stdObjectSchema,
  S.extend(
    S.struct({
      createdAt: S.Date,
    })
  )
);

export const roleSchema = S.union(S.literal("user"), S.literal("admin"));

export const categorySchema: S.Schema<
  ReplaceTypeDeep<ReadonlyDeep<Category>, Date, string>,
  ReadonlyDeep<Category>
> = S.lazy(() =>
  pipe(
    baseSchema,
    S.extend(
      S.struct({
        name: S.optional(S.nullable(S.string)),
        posts: S.array(postSchema),
      })
    )
  )
);

export const postSchema: S.Schema<
  ReplaceTypeDeep<ReadonlyDeep<Post>, Date, string>,
  ReadonlyDeep<Post>
> = S.lazy(() =>
  pipe(
    baseSchema,
    S.extend(
      S.struct({
        title: S.string,
        content: S.string,
        published: S.boolean,
        categories: S.array(categorySchema),
        author: userSchema,
      })
    )
  )
);

export const userSchema: S.Schema<
  ReplaceTypeDeep<ReadonlyDeep<User>, Date, string>,
  ReadonlyDeep<User>
> = S.lazy(() =>
  pipe(
    baseSchema,
    S.extend(
      S.struct({
        email: S.string,
        name: S.string,
        role: roleSchema,
        profile: S.optional(S.nullable(profileSchema)),
        posts: S.array(postSchema),
      })
    )
  )
);

export const profileSchema: S.Schema<
  ReplaceTypeDeep<ReadonlyDeep<Profile>, Date, string>,
  ReadonlyDeep<Profile>
> = S.lazy(() =>
  pipe(
    baseSchema,
    S.extend(
      S.struct({
        bio: S.optional(S.nullable(S.string)),
        user: S.array(userSchema),
      })
    )
  )
);
